library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity CLA_Adder_4_bit is
    Port ( A, B : in  STD_LOGIC_VECTOR (3 downto 0);
           S : out  STD_LOGIC_VECTOR (3 downto 0);
           Cout : out  STD_LOGIC);
end CLA_Adder_4_bit;

architecture Behavioral of CLA_Adder_4_bit is

component FullAdder is
    Port ( A, B, Cin : in  STD_LOGIC;
           S : out  STD_LOGIC);
end component;

signal P, G : STD_LOGIC_VECTOR(3 downto 0);
signal C : STD_LOGIC_VECTOR (4 downto 0);

begin
C(0) <= '0';

gen_PG: for i in 0 to 3 generate
P(i) <= A(i) xor B(i);
G(i) <= A(i) and B(i);
end generate gen_PG;

gen_C: for i in 1 to 4 generate
C(i) <= (P(i-1) and C(i-1)) or G(i-1);
end generate gen_C;

FA1: FullAdder Port Map (A(0), B(0), C(0), S(0));
FA2: FullAdder Port Map (A(1), B(1), C(1), S(1));
FA3: FullAdder Port Map (A(2), B(2), C(2), S(2));
FA4: FullAdder Port Map (A(3), B(3), C(3), S(3));

Cout <= C(4);

end Behavioral;
